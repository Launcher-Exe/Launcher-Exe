local version = "1.0.0"

--[[

Credits:
Some functions by Lopviii#9601
GUI by just a tree#0556


Change logs:
[RELEASE] - FULL GUI!
[ADDED] - Godmode (by Lopviii#9601)
[ADDED] - Kick all
[ADDED] - Walkspeed/runspeed modifier

]]


-- Checks

repeat task.wait() until game:IsLoaded()

if not syn and not KRNL_LOADED then
    
    warn("UNSUPPORTED EXPLOIT")
    local hint = Instance.new("Hint", game:GetService("CoreGui"))
    hint.Text = "UNSUPPORTED EXPLOIT"
    game:GetService("Debris"):AddItem(hint, 5)
    return
    
end

if getgenv().AFCIASJDAILOADED then
    
    warn("ALREADY LOADED")
    local hint = Instance.new("Hint", game:GetService("CoreGui"))
    hint.Text = "ALREADY LOADED"
    game:GetService("Debris"):AddItem(hint, 5)
    return
    
end

if game.PlaceId ~= 1735775055 then
    
    warn("INVALID PLACE")
    local hint = Instance.new("Hint", game:GetService("CoreGui"))
    hint.Text = "INVALID PLACE"
    game:GetService("Debris"):AddItem(hint, 5)
    return
    
end


-- Variables

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local request = request or (syn and syn.request)
local queue_on_teleport = queue_on_teleport or (syn and syn.queue_on_teleport)
local destroyed = false
local kicktarget = nil
local kickalling = false
local modw = false
local modr = false
local modwv = 20
local modrv = 60
local oldw = 16
local oldr = 40

-- Orion UI Library

local library = loadstring(request({
    ["Url"] = "https://raw.githubusercontent.com/shlexware/Orion/main/source";
    ["Method"] = "GET";
}).Body)()


-- GUI Setup

local main = library:MakeWindow({
    ["Name"] = "Fake Control Panel V"..version;
    ["HidePremium"] = true;
    ["SaveConfig"] = false;
    ["IntroEnabled"] = false;
})

local menu = main:MakeTab({
	["Name"] = "Menu";
})

local lp = main:MakeTab({
	["Name"] = "Local player";
})

local op = main:MakeTab({
	["Name"] = "OP";
})

local misc = main:MakeTab({
	["Name"] = "Misc";
})

local info = menu:AddSection({
	["Name"] = "Information"
})

local wrspeed = lp:AddSection({
	["Name"] = "Walkspeed/runspeed"
})

local kickm = op:AddSection({
	["Name"] = "Kick method | By Lopviii#9601"
})

info:AddLabel("Credits:")
info:AddLabel("GUI by just a tree#0556")
info:AddLabel("Some functions by Lopviii#9601")

misc:AddButton({
    ["Name"] = "Rejoin";
    ["Callback"] = function()
        
        getgenv().AFCIASJDAILOADED = nil
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
        
    end;
})

local ind = kickm:AddLabel("Current target: nil")

kickm:AddTextbox({
	["Name"] = "Target";
	["Default"] = "";
	["TextDisappear"] = true;
	["Callback"] = function(raw)
	    
	    local pp = nil
	    local new = {}
	    
	    for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
	        
	        table.insert(new, plr.Name)
	        
	    end
	    
	    for _, plr in pairs(new) do
	        
	        local pre1 = string.lower(raw)
	        local pre2 = string.lower(plr)
	        
	        if string.sub(pre1, 1, 1) == string.sub(pre2, 1, 1) and string.match(pre2, pre1, 1) then
	            
	            pp = plr
	            break
	            
	        end
	        
	    end
	    
	    if pp ~= nil then
	        
	        kicktarget = pp
	        ind:Set("Current target: "..pp)
	        
	    else
	        
	        kicktarget = nil
	        ind:Set("Current target: nil") 
	        
	    end
	    
	end;
})


-- Functions

local function godm()
    
    if disabled then return end
    
    if not character:FindFirstChild("IntValues") then
        
        warn("Fake Control Panel V"..version.." | WARNING | ALREADY ACTIVATED OR IMPOSSIBLE TO ACTIVATE")
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "WARNING | Already activated or impossible to activate",
        	["Time"] = 5
        })
        return
        
    else
        
        local success, errormsg = pcall(function()
            
            character:FindFirstChild("IntValues"):Destroy()
            
        end)
        
        if success then
            
            warn("Fake Control Panel V"..version.." | Successfully activated")
            library:MakeNotification({
            	["Name"] = "Fake Control Panel V"..version,
            	["Content"] = "Successfully activated",
            	["Time"] = 5
            })
            
        else
            
            warn("Fake Control Panel V"..version.." | ERROR\n"..errormsg)
            library:MakeNotification({
            	["Name"] = "Fake Control Panel V"..version,
            	["Content"] = "ERROR | "..errormsg,
            	["Time"] = 5
            })
            
        end
        
    end
    
end

local function kickall()
    
    if disabled then return end
    
    if killalling then
        
        warn("Fake Control Panel V"..version.." | WARNING | ALREADY IN PROCESS")
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "WARNING | Already in process",
        	["Time"] = 5
        })
        return
        
    end
    
    local success, errormsg = pcall(function()
        
        kickalling = true
        
        for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
            
            if plr.Name ~= player.Name then
                
                local success, errormsg = pcall(function()
                    
                    if plr and plr.Character and plr.Character:FindFirstChild("Combat") and plr.Character:FindFirstChild("Combat"):FindFirstChild("click3") then
                        
                        while task.wait(0.001) do
                            
                            if disabled then break end
                            
                            if not plr or not plr.Character then
                                
                                break
                                
                            end
                            
                            plr.Character.Combat.click3:FireServer(
                                plr.Character,
                                plr
                            )
                            
                        end
                        
                    end
                    
                end)
                
                if success then
                    
                    warn("Fake Control Panel V"..version.." | SUCCESSFULLY KICKED ONE PERSON")
                    
                else
                    
                    warn("Fake Control Panel V"..version.." | ERROR\n"..errormsg)
                    
                end
                
            end
            
        end
        
    end)
    
    if success then
        
        kickalling = false
        warn("Fake Control Panel V"..version.." | SUCCESSFULLY KICKED")
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "WARNING | Successfully kicked",
        	["Time"] = 5
        })
        
    else
        
        kickalling = false
        warn("Fake Control Panel V"..version.." | ERROR\n"..errormsg)
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "ERROR | "..errormsg,
        	["Time"] = 5
        })
        
    end
    
end

local function fastkickall()
    
    if disabled then return end
    
    if killalling then
        
        warn("Fake Control Panel V"..version.." | WARNING | ALREADY IN PROCESS")
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "WARNING | Already in process",
        	["Time"] = 5
        })
        
    end
    
    local success, errormsg = pcall(function()
        
        for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
            
            if plr.Name ~= player.Name then
                
                task.spawn(function()
                    
                    local success, errormsg = pcall(function()
                        
                        if plr and plr.Character and plr.Character:FindFirstChild("Combat") and plr.Character:FindFirstChild("Combat"):FindFirstChild("click3") then
                            
                            while task.wait(0.001) do
                                
                                if disabled then break end
                                
                                if not plr or not plr.Character then
                                    
                                    break
                                    
                                end
                                
                                plr.Character.Combat.click3:FireServer(
                                    plr.Character,
                                    plr
                                )
                                
                            end
                            
                        end
                        
                    end)
                    
                    if success then
                        
                        warn("Fake Control Panel V"..version.." | SUCCESSFULLY KICKED ONE PERSON")
                        
                    else
                        
                        warn("Fake Control Panel V"..version.." | ERROR\n"..errormsg)
                        
                    end
                    
                end)
                
            end
            
        end
        
    end)
    
    if success then
        
        warn("Fake Control Panel V"..version.." | SUCCESSFULLY KICKED")
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "WARNING | Successfully kicked",
        	["Time"] = 5
        })
        
    else
        
        warn("Fake Control Panel V"..version.." | ERROR\n"..errormsg)
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "ERROR | "..errormsg,
        	["Time"] = 5
        })
        
    end
    
end

local function kick()
    
    if disabled then return end
    
    if kicktarget == nil or not game:GetService("Players"):FindFirstChild(kicktarget) or not game:GetService("Players"):FindFirstChild(kicktarget).Character:FindFirstChild("Combat") or not game:GetService("Players"):FindFirstChild(kicktarget) or not game:GetService("Players"):FindFirstChild(kicktarget).Character:FindFirstChild("Combat"):FindFirstChild("click3") then
        
        warn("Fake Control Panel V"..version.." | WARNING | THE TARGET IS NIL OR LEFT OR IMPOSSIBLE TO KICK")
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "WARNING | The target is nil or left or impossible to kick",
        	["Time"] = 5
        })
        return
        
    end
    
    local success, errormsg = pcall(function()
        
        local temp = kicktarget
        
        while task.wait(0.001) do
            
            if disabled then break end
            
            if not game:GetService("Players"):FindFirstChild(temp) or not game:GetService("Players"):FindFirstChild(temp).Character then
                
                break
                
            end
            
            game:GetService("Workspace")[temp].Combat.click3:FireServer(
                game:GetService("Workspace")[temp],
                game:GetService("Players")[temp]
            )
            
        end
        
    end)
    
    if success then
        
        warn("Fake Control Panel V"..version.." | SUCCESSFULLY KICKED")
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "Successfully kicked",
        	["Time"] = 5
        })
        
    else
        
        warn("Fake Control Panel V"..version.." | ERROR\n"..errormsg)
        library:MakeNotification({
        	["Name"] = "Fake Control Panel V"..version,
        	["Content"] = "ERROR | "..errormsg,
        	["Time"] = 5
        })
        
    end
    
end


-- Buttons\sliders\toggles

kickm:AddButton({
    ["Name"] = "Activate";
    ["Callback"] = kick;
})

op:AddButton({
    ["Name"] = "Kick all";
    ["Callback"] = kickall;
})

op:AddButton({
    ["Name"] = "Fast kick all";
    ["Callback"] = fastkickall;
})

op:AddButton({
    ["Name"] = "Godmode";
    ["Callback"] = godm;
})

wrspeed:AddToggle({
	["Name"] = "Modify walkspeed",
	["Default"] = false,
	["Callback"] = function(val)
		
        modw = val
        if val == false then
            
            character:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value = oldw
            
        else
            
            oldw = character:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value
            character:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value = modwv
            
        end
		
	end    
})

wrspeed:AddToggle({
	["Name"] = "Modify runspeed",
	["Default"] = false,
	["Callback"] = function(val)
		
		modr = val
		if val == false then
            
            character:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value = oldr
            
        else
            
            oldr = character:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value
            character:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value = modrv
            
        end
		
	end    
})

wrspeed:AddSlider({
	["Name"] = "Modded walkspeed",
	["Min"] = 0,
	["Max"] = 1000,
	["Default"] = 20,
	["Color"] = Color3.fromRGB(255,255,255),
	["Increment"] = 1,
	["ValueName"] = "",
	["Callback"] = function(val)
		
		modwv = val
		if modw then
            
            character:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value = modwv
            
        end
		
	end    
})

wrspeed:AddSlider({
	["Name"] = "Modded runspeed",
	["Min"] = 0,
	["Max"] = 1000,
	["Default"] = 60,
	["Color"] = Color3.fromRGB(255,255,255),
	["Increment"] = 1,
	["ValueName"] = "",
	["Callback"] = function(val)
		
		modrv = val
		if modr then
            
            character:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value = modrv
            
        end
		
	end    
})


-- Loops

local loop1
local loop2

if modw == true then
    
    char:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value = modwv
    
end

if modr == true then
    
    char:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value = modrv
    
end

if loop1 then
    
    loop1:Disconnect()
    
end

if loop2 then
    
    loop2:Disconnect()
    
end

oldw = character:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value
oldr = character:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value

loop2 = character:WaitForChild("MovingV"):WaitForChild("RunSpeed"):GetPropertyChangedSignal("Value"):Connect(function()
    
    if modr == true then
        
        character:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value = modrv
        
    end
    
end)

loop1 = character:WaitForChild("MovingV"):WaitForChild("WalkSpeed"):GetPropertyChangedSignal("Value"):Connect(function()
    
    if modw == true then
        
        character:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value = modwv
        
    end
    
end)

task.spawn(function()
    
    player.CharacterAdded:Connect(function(char)
        
        if modw == true then
            
            char:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value = modwv
            
        end
        
        if modr == true then
            
            char:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value = modrv
            
        end
        
        if loop1 then
            
            loop1:Disconnect()
            
        end
        
        if loop2 then
            
            loop2:Disconnect()
            
        end
        
        oldw = char:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value
        oldr = char:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value
        
        loop2 = char:WaitForChild("MovingV"):WaitForChild("RunSpeed"):GetPropertyChangedSignal("Value"):Connect(function()
            
            if modr == true then
                
                char:WaitForChild("MovingV"):WaitForChild("RunSpeed").Value = modrv
                
            end
            
        end)
        
        loop1 = char:WaitForChild("MovingV"):WaitForChild("WalkSpeed"):GetPropertyChangedSignal("Value"):Connect(function()
            
            if modw == true then
                
                char:WaitForChild("MovingV"):WaitForChild("WalkSpeed").Value = modwv
                
            end
            
        end)
        
    end)
    
end)


-- The variables setter

player.CharacterAdded:Connect(function(char)
    
    character = char
    
end)


-- Finishing

getgenv().AFCIASJDAILOADED = true
library:Init()
